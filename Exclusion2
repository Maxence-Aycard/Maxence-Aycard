#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define OPMAX 36 // Nous supposerons qu'il y a jusqu'à 35 opérations

int graphe[OPMAX][OPMAX];
int visite[OPMAX];
int station[OPMAX];
int operationexist[OPMAX];

void initializegrapheAndStations() {
    memset(graphe, 0, sizeof(graphe));
    memset(visite, 0, sizeof(visite));
    memset(station, 0, sizeof(station));
    memset(operationexist, 0, sizeof(operationexist)); // Initialiser tous les indicateurs d'existence d'opération à 0
}

void addExclusion(int op1, int op2) {
    graphe[op1][op2] = 1;
    graphe[op2][op1] = 1; // Le graphee est non orienté
    operationexist[op1] = 1; // Marquer l'opération comme existante
    operationexist[op2] = 1; // Marquer l'opération comme existante
}

int canBeAssignedToStation(int op, int st) {
    for (int i = 1; i < OPMAX; i++) {
        if (station[i] == st && graphe[op][i]) {
            return 0; // Ne peut pas être assignée à cause de la contrainte d'exclusion
        }
    }
    return 1; // Peut être assignée
}

void dfs(int currentOp, int currentStation) {
    visite[currentOp] = 1;
    station[currentOp] = currentStation;
    printf("Operation %d is assigned to station %d\n", currentOp, currentStation);

    for (int i = 1; i < OPMAX; i++) {
        if (operationexist[i] && !visite[i] && canBeAssignedToStation(i, currentStation)) {
            dfs(i, currentStation);
        }
    }
}

int main() {
    FILE *file;
    int op1, op2;

    file = fopen("exclusions.txt", "r");
    if (file == NULL) {
        perror("Error opening file");
        return EXIT_FAILURE;
    }

    initializegrapheAndStations();

    while (fscanf(file, "%d %d", &op1, &op2) == 2) {
        addExclusion(op1, op2);
    }

    fclose(file);

    int currentStation = 1;
    for (int i = 1; i < OPMAX; i++) {
        if (operationexist[i] && !visite[i]) {
            dfs(i, currentStation);
            currentStation++;
        }
    }

    printf("Total number of stations needed: %d\n", currentStation - 1);

    return EXIT_SUCCESS;
}

